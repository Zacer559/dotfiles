#!/bin/bash

# Source utility functions and variables
source "$(dirname "$0")/utils.sh"
source "$(dirname "$0")/os_setup.sh"

# Main setup function
main() {
  parse_arguments "$@"
  get_roles_to_run
  display_summary
  confirm_and_run
}

# Parse command-line arguments
parse_arguments() {
  EXCLUDE_MODE=false
  SELECT_MODE=false
  ROLES_LIST=()
  while [[ "$#" -gt 0 ]]; do
    case $1 in
    -r | --roles)
      IFS=',' read -r -a ROLES_LIST <<<"$2"
      shift
      ;;
    -s | --select)
      SELECT_MODE=true
      ;;
    -e | --exclude)
      EXCLUDE_MODE=true
      ;;
    -h | --help)
      usage
      exit 0
      ;;
    *)
      echo "Unknown option: $1"
      usage
      exit 1
      ;;
    esac
    shift
  done
}

# Check if specified roles exist
check_roles_exist() {
  local available_roles
  mapfile -t available_roles < <(get_default_roles)
  local invalid_roles=()
  for role in "${ROLES_LIST[@]}"; do
    if ! printf '%s\n' "${available_roles[@]}" | grep -q "^${role}$"; then
      invalid_roles+=("$role")
    fi
  done
  if [ ${#invalid_roles[@]} -ne 0 ]; then
    print_error "The following roles do not exist:"
    for role in "${invalid_roles[@]}"; do
      echo "  - $role"
    done
    exit 1
  fi
}

# Get roles to run
get_roles_to_run() {
  local available_roles
  mapfile -t available_roles < <(get_default_roles)
  if [ ${#ROLES_LIST[@]} -ne 0 ]; then
    check_roles_exist
  elif [[ "$SELECT_MODE" = true ]]; then
    echo "Available roles:"
    print_numbered_roles "${available_roles[@]}"
    echo
    read -r -p "Enter the numbers of roles to include (separated by spaces): " numbers
    local selected_indices
    read -ra selected_indices <<<"$numbers"
    for i in "${selected_indices[@]}"; do
      if [[ $i =~ ^[0-9]+$ ]] && [ "$i" -ge 1 ] && [ "$i" -le ${#available_roles[@]} ]; then
        ROLES_LIST+=("${available_roles[$((i - 1))]}")
      fi
    done
  elif [[ "$EXCLUDE_MODE" = true ]]; then
    echo "Available roles:"
    print_numbered_roles "${available_roles[@]}"
    echo
    read -r -p "Enter the numbers of roles to exclude (separated by spaces): " numbers
    local excluded_indices
    read -ra excluded_indices <<<"$numbers"
    for i in "${!available_roles[@]}"; do
      if ! printf '%s\n' "${excluded_indices[@]}" | grep -q "^$((i + 1))$"; then
        ROLES_LIST+=("${available_roles[i]}")
      fi
    done
  else
    mapfile -t ROLES_LIST < <(get_default_roles)
  fi
}

# Display summary of actions
display_summary() {
  local available_roles
  mapfile -t available_roles < <(get_default_roles)
  echo "The following roles will be executed:"
  local max_index=${#available_roles[@]}
  local padding_width=${#max_index}
  for role in "${ROLES_LIST[@]}"; do
    local role_number
    role_number=$(printf '%s\n' "${available_roles[@]}" | grep -n "^${role}$" | cut -d: -f1)
    printf "%${padding_width}d. %s\n" "$role_number" "$role"
  done
  echo
}

# Confirm and run
confirm_and_run() {
  read -r -p "Do you want to proceed? (y/n): " -n 1 -r
  echo
  if [[ $REPLY =~ ^[Yy]$ ]]; then
    run_setup
  else
    echo "Operation cancelled."
    exit 0
  fi
}

# Run setup
run_setup() {
  check_vault_secret
  detect_and_setup_os
  setup_ssh_keys
  clone_or_update_repository
  run_ansible_playbook
  handle_first_run
}

# Setup SSH keys
setup_ssh_keys() {
  if [[ ! -f "$SSH_DIR/authorized_keys" ]]; then
    _task "Generating SSH keys"
    _cmd "mkdir -p $SSH_DIR"
    _cmd "chmod 700 $SSH_DIR"
    _cmd "ssh-keygen -b 4096 -t rsa -f $SSH_DIR/id_rsa -N '' -C $USER@$HOSTNAME"
    _cmd "cat $SSH_DIR/id_rsa.pub >> $SSH_DIR/authorized_keys"
  fi
}

# Clone or update dotfiles repository
clone_or_update_repository() {
  if [[ ! -d "$DOTFILES_DIR" ]]; then
    _task "Cloning repository"
    _cmd "git clone --quiet https://github.com/Zacer559/dotfiles.git $DOTFILES_DIR"
  else
    _task "Updating repository"
    _cmd "git -C $DOTFILES_DIR pull --quiet"
  fi

  pushd "$DOTFILES_DIR" >/dev/null 2>&1 || exit
  update_ansible_galaxy "$ID"
  popd >/dev/null 2>&1 || exit
}

run_ansible_playbook() {
  _task "Running playbook"
  _task_done
  pushd "$DOTFILES_DIR" >/dev/null 2>&1 || exit
  local playbook_command="ansible-playbook -i $INVENTORY_FILE"

  if [[ -f "$VAULT_SECRET" ]]; then
    playbook_command="$playbook_command --vault-password-file $VAULT_SECRET"
  fi

  # Convert ROLES_LIST array to a comma-separated string
  local roles_string
  printf -v roles_string '%s,' "${ROLES_LIST[@]}"
  roles_string=${roles_string%,}

  playbook_command="$playbook_command -e 'roles_list=[\"${roles_string}\"]'"
  playbook_command="$playbook_command $DOTFILES_DIR/main.yml"

  echo "Executing: $playbook_command"
  eval "$playbook_command"

  popd >/dev/null 2>&1 || exit
}

# Handle first run
handle_first_run() {
  if [[ ! -f "$IS_FIRST_RUN" ]]; then
    print_success "First run complete!"
    print_info "Please reboot your computer to complete the setup."
    touch "$IS_FIRST_RUN"
  fi
}

# Run the main function
main "$@"
